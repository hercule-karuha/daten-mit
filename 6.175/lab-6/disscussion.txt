-------------------------------------------------------------------------------
Discussion Question 1 (10 Points): Debugging practice!

If you replace the BTB with a simple pc + 4 address prediction, the processor 
still works, but it does not perform as well. 
If you replace it with a really bad predictor that predicts pc is the next 
instruction for each pc, it should still work but have even worse performance 
because each instruction would require redirection (unless the instruction loops 
back to itself). If you actually set the prediction to pc, you will get errors in 
the assembly tests; the first one will be from cache.riscv.vmh.

What is the error you get?
What is happening in the processor to cause that to happen?
Why do not you get this error with PC+4 and BTB predictors?
How would you fix it?
You do not actually have to fix this bug, just answer the questions. 
(Hint: look at the addr field of ExecInst structure.)
-------------------------------------------------------------------------------

ERROR: Executing unsupported instruction at pc: 00004000. Exiting

When execute the store instruction, the addr field in ExecInst means the address
in memory to store. But because of misprediction, it is write to pc.

the store instruction won't cause misprediction in PC+4 and BTB predictors.

i may add a condition to check the instruction type when misprediction occur.

-------------------------------------------------------------------------------
Discussion Question 2 (5 Points): What evidence do you have that all pipeline 
stages can fire in the same cycle?
-------------------------------------------------------------------------------
buy the output of the log


-------------------------------------------------------------------------------
Discussion Question 3 (5 Points): In your six-stage pipelined processor, how 
many cycles does it take to correct a mispredicted instruction?
-------------------------------------------------------------------------------
4


-------------------------------------------------------------------------------
Discussion Question 4 (5 Points): If an instruction depends on the result of 
the instruction immediately before it in the pipeline, how many cycles is that 
instruction stalled?
-------------------------------------------------------------------------------
3

-------------------------------------------------------------------------------
Discussion Question 5 (5 Points): What IPC do you get for each benchmark?
-------------------------------------------------------------------------------

Benchmarks Test
-- benchmark test: median --
Benchmark median
Cycles = 15346
Insts  = 9293
IPC = 0.6055
Return 0
PASSED
-- benchmark test: multiply --
Benchmark multiply
Cycles = 38538
Insts  = 25607
IPC = 0.6644
Return 0
PASSED
-- benchmark test: qsort --
Benchmark qsort
Cycles = 417569
Insts  = 250914
IPC = 0.6008
Return 0
PASSED
-- benchmark test: towers --
Benchmark tower
Cycles = 6236
Insts  = 4521
IPC = 0.7249
Return 0
PASSED
-- benchmark test: vvadd --
Benchmark vvadd
Cycles = 3637
Insts  = 2426
IPC = 0.6670
Return 0
PASSED


-------------------------------------------------------------------------------
Discussion Question 6 (10 Points): Planning!

One of the hardest things about this lab is properly training and integrating 
the BHT into the pipeline. There are many mistakes that can be made while still 
seeing decent results. By having a good plan based on the fundamentals of 
direction prediction, you will avoid many of those mistakes.

For this discussion question, state your plan for integrating the BHT into the 
pipeline. The following questions should help guide you:

Where will the BHT be positioned in the pipeline?
What pipeline stage performs lookups into the BHT?
In which pipeline stage will the BHT prediction be used?
Will the BHT prediction need to be passed between pipeline stages?

How to redirect PC using BHT prediction?
Do you need to add a new epoch?
How to handle the redirect messages?
Do you need to change anything to the current instruction and its data structures if redirecting?

How will you train the BHT?
Which stage produces training data for the BHT?
Which stage will use the interface method to train the BHT?
How to send training data?
For which instructions will you train the BHT?

How will you know if your BHT works?
-------------------------------------------------------------------------------
decode
decode
fetch
yes

...
yes
...
yes

update
execute
execute
update
branch

log output
